{
  "version": 3,
  "sources": ["../../pocketbase/src/ClientResponseError.ts", "../../pocketbase/src/stores/utils/cookie.ts", "../../pocketbase/src/stores/utils/jwt.ts", "../../pocketbase/src/stores/BaseAuthStore.ts", "../../pocketbase/src/stores/LocalAuthStore.ts", "../../pocketbase/src/services/utils/BaseService.ts", "../../pocketbase/src/services/SettingsService.ts", "../../pocketbase/src/services/utils/CrudService.ts", "../../pocketbase/src/services/utils/legacy.ts", "../../pocketbase/src/services/utils/refresh.ts", "../../pocketbase/src/services/AdminService.ts", "../../pocketbase/src/services/utils/options.ts", "../../pocketbase/src/services/RealtimeService.ts", "../../pocketbase/src/services/RecordService.ts", "../../pocketbase/src/services/CollectionService.ts", "../../pocketbase/src/services/LogService.ts", "../../pocketbase/src/services/HealthService.ts", "../../pocketbase/src/services/FileService.ts", "../../pocketbase/src/services/BackupService.ts", "../../pocketbase/src/Client.ts", "../../pocketbase/src/stores/AsyncAuthStore.ts"],
  "sourcesContent": ["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport class ClientResponseError extends Error {\n    url: string                    = '';\n    status: number                 = 0;\n    response: {[key: string]: any} = {};\n    isAbort:  boolean              = false;\n    originalError: any             = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (errData !== null && typeof errData === 'object') {\n            this.url           = typeof errData.url === 'string' ? errData.url : '';\n            this.status        = typeof errData.status === 'number' ? errData.status : 0;\n            this.isAbort       = !!errData.isAbort;\n            this.originalError = errData.originalError;\n\n            if (errData.response !== null && typeof errData.response === 'object')  {\n                this.response =  errData.response;\n            } else if (errData.data !== null && typeof errData.data === 'object')  {\n                this.response =  errData.data;\n            } else {\n                this.response =  {};\n            }\n        }\n\n        if (!this.originalError && !(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (typeof DOMException !== 'undefined' && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.response?.message;\n        if (!this.message) {\n            if (this.isAbort) {\n                this.message = 'The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.';\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\n                this.message = 'Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).';\n            } else {\n                this.message = 'Something went wrong while processing your request.';\n            }\n        }\n    }\n\n    /**\n     * Alias for `this.response` to preserve the backward compatibility.\n     */\n    get data() {\n        return this.response;\n    }\n\n    /**\n     * Make a POJO's copy of the current error class instance.\n     * @see https://github.com/vuex-orm/vuex-orm/issues/255\n     */\n    toJSON() {\n        return { ...this };\n    }\n}\n", "/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions{\n    decode?: (val: string) => string,\n}\n\n/**\n* Parses the given cookie header string into an object\n* The object has the various cookies as keys(names) => values\n*/\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any }  {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== 'string') {\n        return result;\n    }\n\n    const opt    = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf('=', index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(';', index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(';', eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n};\n\nexport interface SerializeOptions {\n    encode?:   (val: string | number | boolean) => string,\n    maxAge?:   number,\n    domain?:   string,\n    path?:     string,\n    expires?:  Date,\n    httpOnly?: boolean,\n    secure?:   boolean,\n    priority?: string,\n    sameSite?: boolean|string,\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(name: string, val: string, options?: SerializeOptions): string {\n    const opt    = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError('argument name is invalid');\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError('argument val is invalid');\n    }\n\n    let result = name + '=' + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError('option maxAge is invalid');\n        }\n\n        result += '; Max-Age=' + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError('option domain is invalid');\n        }\n\n        result += '; Domain=' + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError('option path is invalid');\n        }\n\n        result += '; Path=' + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError('option expires is invalid');\n        }\n\n        result += '; Expires=' + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += '; HttpOnly';\n    }\n\n    if (opt.secure) {\n        result += '; Secure';\n    }\n\n    if (opt.priority) {\n        const priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case 'low':\n                result += '; Priority=Low';\n                break;\n            case 'medium':\n                result += '; Priority=Medium';\n                break;\n            case 'high':\n                result += '; Priority=High';\n                break;\n            default:\n                throw new TypeError('option priority is invalid');\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += '; SameSite=Strict';\n                break;\n            case 'lax':\n                result += '; SameSite=Lax';\n                break;\n            case 'strict':\n                result += '; SameSite=Strict';\n                break;\n            case 'none':\n                result += '; SameSite=None';\n                break;\n            default:\n                throw new TypeError('option sameSite is invalid');\n        }\n    }\n\n    return result;\n};\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf('%') !== -1\n        ? decodeURIComponent(val)\n        : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return (\n        Object.prototype.toString.call(val) === '[object Date]' ||\n        val instanceof Date\n    );\n}\n", "let atobPolyfill: Function;\nif (typeof atob === 'function') {\n    atobPolyfill = atob\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n                // and if not first of each 4 characters,\n                // convert the first 8 bits to one ascii character\n                bc++ % 4) ?\n            (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n            0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(atobPolyfill(token.split('.')[1]).split('').map(function (c: string) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(''));\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {\n        }\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || (payload.exp - expirationThreshold) > (Date.now() / 1000))\n    ) {\n        return false;\n    }\n\n    return true;\n}\n", "import { cookieParse, cookieSerialize, SerializeOptions } from '@/stores/utils/cookie';\nimport { isTokenExpired, getTokenPayload } from '@/stores/utils/jwt';\n\nexport type AuthModel = { [key: string]: any }|null;\n\nexport type OnStoreChangeFunc = (token: string, model: AuthModel) => void;\n\nconst defaultCookieKey = 'pb_auth';\n\n/**\n * Base AuthStore class that is intended to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport abstract class BaseAuthStore {\n    protected baseToken: string = '';\n    protected baseModel: AuthModel = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): AuthModel {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Checks whether the current store state is for admin authentication.\n     */\n    get isAdmin(): boolean {\n        return getTokenPayload(this.token).type === \"admin\";\n    }\n\n    /**\n     * Checks whether the current store state is for auth record authentication.\n     */\n    get isAuthRecord(): boolean {\n        return getTokenPayload(this.token).type === \"authRecord\";\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model?: AuthModel): void {\n        this.baseToken = token || '';\n        this.baseModel = model || null;\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = '';\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || '')[key] || '';\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== 'object' || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || '', data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure:   true,\n            sameSite: true,\n            httpOnly: true,\n            path:     \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date('1970-01-01');\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            model: this.model ? JSON.parse(JSON.stringify(this.model)) : null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength = typeof Blob !== 'undefined' ?\n            (new Blob([result])).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.model && resultLength > 4096) {\n            rawData.model = {id: rawData?.model?.id, email: rawData?.model?.email};\n            const extraProps = [\"collectionId\", \"username\", \"verified\"];\n            for (const prop in this.model) {\n                if (extraProps.includes(prop)) {\n                    rawData.model[prop] = this.model[prop];\n                }\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.model);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i];    // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        }\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n", "import { BaseAuthStore, AuthModel } from '@/stores/BaseAuthStore';\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n\n        this._bindStorageEvent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): AuthModel {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.model || null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model?: AuthModel) {\n        this._storageSet(this.storageKey, {\n            'token': token,\n            'model': model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || '';\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) { // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== 'string') {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n\n    /**\n     * Updates the current store state on localStorage change.\n     */\n    private _bindStorageEvent() {\n        if (typeof window === 'undefined' || !window?.localStorage || !window.addEventListener) {\n            return;\n        }\n\n        window.addEventListener('storage', (e) => {\n            if (e.key != this.storageKey) {\n                return;\n            }\n\n            const data = this._storageGet(this.storageKey) || {};\n\n            super.save(data.token || '', data.model || null);\n        });\n    }\n}\n", "import Client from '@/Client';\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport abstract class BaseService {\n    readonly client: Client\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n", "import { BaseService }   from '@/services/utils/BaseService';\nimport { CommonOptions } from '@/services/utils/options';\n\ninterface appleClientSecret {\n    secret: string;\n}\n\nexport class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     */\n    getAll(options?: CommonOptions): Promise<{[key: string]:any}> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/settings', options);\n    }\n\n    /**\n     * Bulk updates app settings.\n     */\n    update(\n        bodyParams?: {[key:string]:any}|FormData,\n        options?: CommonOptions,\n    ): Promise<{[key: string]:any}> {\n        options = Object.assign({\n            'method': 'PATCH',\n            'body':   bodyParams,\n        }, options);\n\n        return this.client.send('/api/settings', options);\n    }\n\n    /**\n     * Performs a S3 filesystem connection test.\n     *\n     * The currently supported `filesystem` are \"storage\" and \"backups\".\n     */\n    testS3(filesystem: string = \"storage\", options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n            'body': {\n                'filesystem': filesystem,\n            },\n        }, options);\n\n        return this.client.send('/api/settings/test/s3', options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     */\n    testEmail(toEmail: string, emailTemplate: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n            'body': {\n                'email':    toEmail,\n                'template': emailTemplate,\n            },\n        }, options);\n\n        return this.client.send('/api/settings/test/email', options)\n            .then(() => true);\n    }\n\n    /**\n     * Generates a new Apple OAuth2 client secret.\n     */\n    generateAppleClientSecret(\n        clientId: string,\n        teamId: string,\n        keyId: string,\n        privateKey: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<appleClientSecret> {\n        options = Object.assign({\n            'method': 'POST',\n            'body': {\n                clientId,\n                teamId,\n                keyId,\n                privateKey,\n                duration,\n            },\n        }, options);\n\n        return this.client.send('/api/settings/apple/generate-client-secret', options);\n    }\n}\n", "import { BaseService }         from '@/services/utils/BaseService';\nimport { ClientResponseError } from '@/ClientResponseError';\nimport { ListResult }          from '@/services/utils/dtos';\nimport {\n    CommonOptions,\n    ListOptions,\n    FullListOptions\n} from '@/services/utils/options';\n\nexport abstract class CrudService<M> extends BaseService   {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string\n\n    /**\n     * Response data decoder.\n     */\n    decode<T = M>(data: { [key: string]: any }): T {\n        return data as T;\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once\n     * (by default 500 items per request; to change it set the `batch` query param).\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getFullList<T = M>(options?: FullListOptions): Promise<Array<T>>\n\n    /**\n     * Legacy version of getFullList with explicitly specified batch size.\n     */\n    getFullList<T = M>(batch?: number, options?: ListOptions): Promise<Array<T>>\n\n    getFullList<T = M>(batchOrqueryParams?: number|FullListOptions, options?: ListOptions): Promise<Array<T>> {\n        if (typeof batchOrqueryParams == \"number\") {\n            return this._getFullList<T>(batchOrqueryParams, options);\n        }\n\n        options = Object.assign({}, batchOrqueryParams, options);\n\n        let batch = 500;\n        if (options.batch) {\n            batch = options.batch;\n            delete options.batch;\n        }\n\n        return this._getFullList<T>(batch, options);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getList<T = M>(page = 1, perPage = 30, options?: ListOptions): Promise<ListResult<T>> {\n        options = Object.assign({\n            method: 'GET'\n        }, options);\n\n        options.query = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, options.query);\n\n        return this.client.send(this.baseCrudPath, options)\n            .then((responseData: any) => {\n                responseData.items = responseData.items?.map((item: any) => {\n                    return this.decode<T>(item);\n                }) || [];\n\n                return responseData;\n            });\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter, skipTotal })` and\n     * returns the first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     */\n    getFirstListItem<T = M>(filter: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign({\n            'requestKey': 'one_by_filter_' + this.baseCrudPath + \"_\" + filter,\n        }, options);\n\n        options.query = Object.assign({\n            'filter':     filter,\n            'skipTotal':  1,\n        }, options.query);\n\n        return this.getList<T>(1, 1, options)\n            .then((result) => {\n                if (!result?.items?.length) {\n                    throw new ClientResponseError({\n                        status: 404,\n                        data: {\n                            code: 404,\n                            message: \"The requested resource wasn't found.\",\n                            data: {},\n                        },\n                    });\n                }\n\n                return result.items[0];\n            });\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    getOne<T = M>(id: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    create<T = M>(\n        bodyParams?: {[key:string]:any}|FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign({\n            'method': 'POST',\n            'body':   bodyParams,\n        }, options);\n\n        return this.client.send(this.baseCrudPath, options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     */\n    update<T = M>(\n        id: string,\n        bodyParams?: {[key:string]:any}|FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign({\n            'method': 'PATCH',\n            'body':   bodyParams,\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(id: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'DELETE',\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(id), options)\n            .then(() => true);\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(batchSize = 500, options?: ListOptions): Promise<Array<T>> {\n        options = options || {};\n        options.query = Object.assign({\n            'skipTotal': 1,\n        }, options.query);\n\n        let result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getList(page, batchSize || 500, options).then((list) => {\n                const castedList = (list as any as ListResult<T>);\n                const items      = castedList.items;\n\n                result = result.concat(items);\n\n                if (items.length == list.perPage) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n}\n", "import { SendOptions } from '@/services/utils/options';\n\nexport function normalizeLegacyOptionsArgs(legacyWarn: string, baseOptions: SendOptions, bodyOrOptions?: any, query?: any): SendOptions {\n    const hasBodyOrOptions = typeof bodyOrOptions !== 'undefined';\n    const hasQuery = typeof query !== 'undefined';\n\n    if (!hasQuery && !hasBodyOrOptions) {\n        return baseOptions;\n    }\n\n    if (hasQuery) {\n        console.warn(legacyWarn);\n        baseOptions.body = Object.assign({}, baseOptions.body, bodyOrOptions);\n        baseOptions.query = Object.assign({}, baseOptions.query, query);\n\n        return baseOptions;\n    }\n\n    return Object.assign(baseOptions, bodyOrOptions);\n}\n", "import Client             from '@/Client';\nimport { isTokenExpired } from '@/stores/utils/jwt';\n\n// reset previous auto refresh registrations\nexport function resetAutoRefresh(client: Client) {\n    (client as any)._resetAutoRefresh?.();\n}\n\nexport function registerAutoRefresh(\n  client: Client,\n  threshold: number,\n  refreshFunc: () => Promise<any>,\n  reauthenticateFunc: () => Promise<any>,\n) {\n    resetAutoRefresh(client);\n\n    const oldBeforeSend = client.beforeSend;\n    const oldModel = client.authStore.model;\n\n    // unset the auto refresh in case the auth store was cleared\n    // OR a new model was authenticated\n    const unsubStoreChange = client.authStore.onChange((newToken, model) => {\n        if (\n            !newToken ||\n            model?.id != oldModel?.id ||\n            // check the collection id in case an admin and auth record share the same id\n            ((model?.collectionId || oldModel?.collectionId) && model?.collectionId != oldModel?.collectionId)\n        ) {\n            resetAutoRefresh(client);\n        }\n    });\n\n    // initialize a reset function and attach it dynamically to the client\n    (client as any)._resetAutoRefresh = function() {\n        unsubStoreChange();\n        client.beforeSend = oldBeforeSend;\n        delete (client as any)._resetAutoRefresh;\n    };\n\n    client.beforeSend = async (url, sendOptions) => {\n        const oldToken = client.authStore.token;\n\n        if (sendOptions.query?.autoRefresh) {\n            return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n        }\n\n        let isValid = client.authStore.isValid;\n        if (\n            // is loosely valid\n            isValid &&\n            // but it is going to expire in the next \"threshold\" seconds\n            isTokenExpired(client.authStore.token, threshold)\n        ) {\n            try {\n                await refreshFunc();\n            } catch (_) {\n                isValid = false;\n            }\n        }\n\n        // still invalid -> reauthenticate\n        if (!isValid) {\n            await reauthenticateFunc();\n        }\n\n        // the request wasn't sent with a custom token\n        const headers = sendOptions.headers || {};\n        for (let key in headers) {\n            if (\n                key.toLowerCase() == \"authorization\" &&\n                // the request wasn't sent with a custom token\n                oldToken == headers[key] &&\n                client.authStore.token\n            ) {\n                // set the latest store token\n                headers[key] = client.authStore.token;\n                break;\n            }\n        }\n        sendOptions.headers = headers;\n\n        return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n    }\n}\n", "import { CrudService }                           from '@/services/utils/CrudService';\nimport { AdminModel }                            from '@/services/utils/dtos';\nimport { AuthOptions, CommonOptions }            from '@/services/utils/options';\nimport { normalizeLegacyOptionsArgs }            from '@/services/utils/legacy';\nimport { registerAutoRefresh, resetAutoRefresh } from '@/services/utils/refresh';\n\nexport interface AdminAuthResponse {\n    [key: string]: any;\n\n    token: string;\n    admin: AdminModel;\n}\n\nexport class AdminService extends CrudService<AdminModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/admins';\n    }\n\n    // ---------------------------------------------------------------\n    // Post update/delete AuthStore sync\n    // ---------------------------------------------------------------\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = AdminModel>(\n        id: string,\n        bodyParams?: {[key:string]:any}|FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        return super.update(id, bodyParams, options).then((item) => {\n            // update the store state if the updated item id matches with the stored model\n            if (\n                this.client.authStore.model?.id === item.id &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' // is not record auth\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            // clear the store state if the deleted item id matches with the stored model\n            if (\n                success &&\n                this.client.authStore.model?.id === id &&\n                typeof this.client.authStore.model?.collectionId === 'undefined' // is not record auth\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'admin': admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account with its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authWithPassword(email: string, password: string, options?: AuthOptions): Promise<AdminAuthResponse>\n\n    /**\n     * @deprecated\n     * Consider using authWithPassword(email, password, options?).\n     */\n    authWithPassword(email: string, password: string, body?: any, query?: any): Promise<AdminAuthResponse>\n\n    async authWithPassword(\n        email: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<AdminAuthResponse> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'identity': email,\n                'password': password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authWithPassword(email, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(email, pass, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        const autoRefreshThreshold = options.autoRefreshThreshold;\n        delete options.autoRefreshThreshold;\n\n        // not from auto refresh reauthentication\n        if (!options.autoRefresh) {\n            resetAutoRefresh(this.client);\n        }\n\n        let authData = await this.client.send(this.baseCrudPath + '/auth-with-password', options);\n\n        authData = this.authResponse(authData);\n\n        if (autoRefreshThreshold) {\n            registerAutoRefresh(\n                this.client,\n                autoRefreshThreshold,\n                () => this.authRefresh({autoRefresh: true}),\n                () => this.authWithPassword(email, password, Object.assign({autoRefresh: true}, options)),\n            );\n        }\n\n        return authData;\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authRefresh(options?: CommonOptions): Promise<AdminAuthResponse>\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    authRefresh(body?: any, query?: any): Promise<AdminAuthResponse>\n\n    authRefresh(bodyOrOptions?: any, query?: any): Promise<AdminAuthResponse> {\n        let options: any = {\n            'method': 'POST',\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCrudPath + '/auth-refresh', options)\n            .then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     */\n    requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>\n\n    requestPasswordReset(email: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'email': email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCrudPath + '/request-password-reset', options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     */\n    confirmPasswordReset(resetToken: string, password: string, passwordConfirm: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(resetToken, password, passwordConfirm, options?).\n     */\n    confirmPasswordReset(resetToken: string, password: string, passwordConfirm: string, body?: any, query?: any): Promise<boolean>\n\n    confirmPasswordReset(resetToken: string, password: string, passwordConfirm: string, bodyOrOptions?: any, query?: any): Promise<boolean>{\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'token':           resetToken,\n                'password':        password,\n                'passwordConfirm': passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of confirmPasswordReset(resetToken, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(resetToken, password, passwordConfirm, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCrudPath + '/confirm-password-reset', options)\n            .then(() => true);\n    }\n}\n", "export interface SendOptions extends RequestInit {\n    // for backward compatibility and to minimize the verbosity,\n    // any top-level field that doesn't exist in RequestInit or the\n    // fields below will be treated as query parameter.\n    [key: string]: any;\n\n    /**\n     * Optional custom fetch function to use for sending the request.\n     */\n    fetch?: (url: RequestInfo | URL, config?: RequestInit) => Promise<Response>;\n\n    /**\n     * Custom headers to send with the requests.\n     */\n    headers?: { [key: string]: string };\n\n    /**\n     * The body of the request (serialized automatically for json requests).\n     */\n    body?: any;\n\n    /**\n     * Query parameters that will be appended to the request url.\n     */\n    query?: { [key: string]: any };\n\n    /**\n     * @deprecated use `query` instead\n     *\n     * for backward-compatibility `params` values are merged with `query`,\n     * but this option may get removed in the final v1 release\n     */\n    params?: { [key: string]: any };\n\n    /**\n     * The request identifier that can be used to cancel pending requests.\n     */\n    requestKey?:  string|null;\n\n    /**\n     * @deprecated use `requestKey:string` instead\n     */\n    $cancelKey?:  string;\n\n    /**\n     * @deprecated use `requestKey:null` instead\n     */\n    $autoCancel?: boolean;\n}\n\nexport interface CommonOptions extends SendOptions {\n    fields?: string;\n}\n\nexport interface ListOptions extends CommonOptions {\n    page?:      number;\n    perPage?:   number;\n    sort?:      string;\n    filter?:    string;\n    skipTotal?: boolean;\n}\n\nexport interface FullListOptions extends ListOptions {\n    batch?: number;\n}\n\nexport interface RecordOptions extends CommonOptions {\n    expand?: string;\n}\n\nexport interface RecordListOptions extends ListOptions, RecordOptions {\n}\n\nexport interface RecordFullListOptions extends FullListOptions, RecordOptions {\n}\n\nexport interface LogStatsOptions extends CommonOptions {\n    filter?: string;\n}\n\nexport interface FileOptions extends CommonOptions {\n    thumb?: string;\n    download?: boolean;\n}\n\nexport interface AuthOptions extends CommonOptions {\n    /**\n     * If autoRefreshThreshold is set it will take care to auto refresh\n     * when necessary the auth data before each request to ensure that\n     * the auth state is always valid.\n     *\n     * The value must be in seconds, aka. the amount of seconds\n     * that will be subtracted from the current token `exp` claim in order\n     * to determine whether it is going to expire within the specified time threshold.\n     *\n     * For example, if you want to auto refresh the token if it is\n     * going to expire in the next 30mins (or already has expired),\n     * it can be set to `1800`\n     */\n    autoRefreshThreshold?: number;\n}\n\n// -------------------------------------------------------------------\n\n// list of known SendOptions keys (everything else is treated as query param)\nconst knownSendOptionsKeys = [\n    'requestKey',\n    '$cancelKey',\n    '$autoCancel',\n    'fetch',\n    'headers',\n    'body',\n    'query',\n    'params',\n    // ---,\n    'cache',\n    'credentials',\n    'headers',\n    'integrity',\n    'keepalive',\n    'method',\n    'mode',\n    'redirect',\n    'referrer',\n    'referrerPolicy',\n    'signal',\n    'window',\n];\n\n// modifies in place the provided options by moving unknown send options as query parameters.\nexport function normalizeUnknownQueryParams(options?: SendOptions): void {\n    if (!options) {\n        return\n    }\n\n    options.query = options.query || {};\n    for (let key in options) {\n        if (knownSendOptionsKeys.includes(key)) {\n            continue\n        }\n\n        options.query[key] = options[key];\n        delete (options[key]);\n    }\n}\n", "import { ClientResponseError }                      from '@/ClientResponseError';\nimport { BaseService }                              from '@/services/utils/BaseService';\nimport { SendOptions, normalizeUnknownQueryParams } from '@/services/utils/options';\n\ninterface promiseCallbacks {\n    resolve: Function\n    reject: Function\n}\n\ntype Subscriptions = { [key: string]: Array<EventListener> };\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport class RealtimeService extends BaseService {\n    clientId: string = \"\";\n\n    private eventSource: EventSource | null = null;\n    private subscriptions: Subscriptions = {};\n    private lastSentSubscriptions: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 15000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(\n        topic: string,\n        callback: (data: any) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error('topic must be set.')\n        }\n\n        let key = topic;\n\n        // serialize and append the topic options (if any)\n        if (options) {\n            normalizeUnknownQueryParams(options)\n            const serialized = \"options=\" + encodeURIComponent(JSON.stringify({ query: options.query, headers: options.headers }));\n            key += (key.includes(\"?\") ? \"&\" : \"?\") + serialized;\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = (e as MessageEvent);\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[key]) {\n            this.subscriptions[key] = [];\n        }\n        this.subscriptions[key].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[key].length === 1) {\n            // send the updated subscriptions (if it is the first for the key)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(key, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        let needToSubmit = false;\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all listeners related to the topic\n            const subs = this.getSubscriptionsByTopic(topic)\n            for (let key in subs) {\n                if (!this.hasSubscriptionListeners(key)) {\n                    continue; // already unsubscribed\n                }\n\n                for (let listener of this.subscriptions[key]) {\n                    this.eventSource?.removeEventListener(key, listener);\n                }\n                delete this.subscriptions[key];\n\n                // mark for subscriptions change submit if there are no other listeners\n                if (!needToSubmit) {\n                    needToSubmit = true;\n                }\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(keyPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let key in this.subscriptions) {\n            // \"?\" so that it can be used as end delimiter for the prefix\n            if (!(key + \"?\").startsWith(keyPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            delete this.subscriptions[key];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(topic: string, listener: EventListener): Promise<void> {\n        let needToSubmit = false;\n\n        const subs = this.getSubscriptionsByTopic(topic)\n        for (let key in subs) {\n            if (!Array.isArray(this.subscriptions[key]) || !this.subscriptions[key].length) {\n                continue; // already unsubscribed\n            }\n\n            let exist = false;\n            for (let i = this.subscriptions[key].length - 1; i >= 0; i--) {\n                if (this.subscriptions[key][i] !== listener) {\n                    continue;\n                }\n\n                exist = true;                         // has at least one matching listener\n                delete this.subscriptions[key][i];    // removes the function reference\n                this.subscriptions[key].splice(i, 1); // reindex the array\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            if (!exist) {\n                continue;\n            }\n\n            // remove the key from the subscriptions list if there are no other listeners\n            if (!this.subscriptions[key].length) {\n                delete this.subscriptions[key];\n            }\n\n            // mark for subscriptions change submit if there are no other listeners\n            if (!needToSubmit && !this.hasSubscriptionListeners(key)) {\n                needToSubmit = true;\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(keyToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified key\n        if (keyToCheck) {\n            return !!this.subscriptions[keyToCheck]?.length;\n        }\n\n        // check for at least one non-empty subscription\n        for (let key in this.subscriptions) {\n            if (!!this.subscriptions[key]?.length) {\n                return true\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys();\n\n        return this.client.send('/api/realtime', {\n            method: 'POST',\n            body: {\n                'clientId': this.clientId,\n                'subscriptions': this.lastSentSubscriptions,\n            },\n            requestKey: this.getSubscriptionsCancelKey(),\n        }).catch((err) => {\n            if (err?.isAbort) {\n                return; // silently ignore aborted pending requests\n            }\n            throw err;\n        });\n    }\n\n    private getSubscriptionsCancelKey(): string {\n        return \"realtime_\" + this.clientId;\n    }\n\n    private getSubscriptionsByTopic(topic: string): Subscriptions {\n        const result: Subscriptions = {};\n\n        // \"?\" so that it can be used as end delimiter for the topic\n        topic = topic.includes(\"?\") ? topic : (topic + \"?\");\n\n        for (let key in this.subscriptions) {\n            if ((key + \"?\").startsWith(topic)) {\n                result[key] = this.subscriptions[key];\n            }\n        }\n\n        return result;\n    }\n\n    private getNonEmptySubscriptionKeys(): Array<string> {\n        const result : Array<string> = [];\n\n        for (let key in this.subscriptions) {\n            if (this.subscriptions[key].length) {\n                result.push(key);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.addEventListener(key, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.removeEventListener(key, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0)  {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        })\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 15s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildUrl('/api/realtime'))\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(new Error(\"Failed to establish realtime connection.\"));\n        };\n\n        this.eventSource.addEventListener(\"PB_CONNECT\", (e) => {\n            const msgEvent = (e as MessageEvent);\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions().then(async () => {\n                let retries = 3;\n                while (this.hasUnsentSubscriptions() && retries > 0) {\n                    retries--;\n                    // resubscribe to ensure that the latest topics are submitted\n                    //\n                    // This is needed because missed topics could happen on reconnect\n                    // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                    // was made before the submit was able to complete.\n                    await this.submitSubscriptions();\n                }\n            }).then(() => {\n                for (let p of this.pendingConnects) {\n                    p.resolve();\n                }\n\n                // reset connect meta\n                this.pendingConnects = [];\n                this.reconnectAttempts = 0;\n                clearTimeout(this.reconnectTimeoutId);\n                clearTimeout(this.connectTimeoutId);\n\n                // propagate the PB_CONNECT event\n                const connectSubs = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                for (let key in connectSubs) {\n                    for (let listener of connectSubs[key]) {\n                        listener(e);\n                    }\n                }\n            }).catch((err) => {\n                this.clientId = \"\";\n                this.connectErrorHandler(err);\n            });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionKeys();\n        if (latestTopics.length != this.lastSentSubscriptions.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentSubscriptions.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.pendingConnects = [];\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout = this.predefinedReconnectIntervals[this.reconnectAttempts] || this.predefinedReconnectIntervals[this.predefinedReconnectIntervals.length - 1];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.client.cancelRequest(this.getSubscriptionsCancelKey());\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // resolve any remaining connect promises\n            //\n            // this is done to avoid unnecessary throwing errors in case\n            // unsubscribe is called before the pending connect promises complete\n            // (see https://github.com/pocketbase/pocketbase/discussions/2897#discussioncomment-6423818)\n            for (let p of this.pendingConnects) {\n                p.resolve();\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n", "import Client from '@/Client';\nimport { CrudService } from '@/services/utils/CrudService';\nimport { RealtimeService, UnsubscribeFunc } from '@/services/RealtimeService';\nimport { ClientResponseError } from '@/ClientResponseError';\nimport { ListResult, RecordModel, ExternalAuthModel } from '@/services/utils/dtos';\nimport {\n    SendOptions,\n    CommonOptions,\n    RecordOptions,\n    RecordListOptions,\n    RecordFullListOptions,\n} from '@/services/utils/options';\nimport { normalizeLegacyOptionsArgs } from '@/services/utils/legacy';\n\nexport interface RecordAuthResponse<T = RecordModel> {\n    /**\n     * The signed PocketBase auth record.\n     */\n    record: T;\n\n    /**\n     * The PocketBase record auth token.\n     *\n     * If you are looking for the OAuth2 access and refresh tokens\n     * they are available under the `meta.accessToken` and `meta.refreshToken` props.\n     */\n    token: string;\n\n    /**\n     * Auth meta data usually filled when OAuth2 is used.\n     */\n    meta?: {[key: string]: any};\n}\n\nexport interface AuthProviderInfo {\n    name:                string;\n    displayName:         string;\n    state:               string;\n    authUrl:             string;\n    codeVerifier:        string;\n    codeChallenge:       string;\n    codeChallengeMethod: string;\n}\n\nexport interface AuthMethodsList {\n    usernamePassword: boolean;\n    emailPassword:    boolean;\n    onlyVerified:     boolean;\n    authProviders:    Array<AuthProviderInfo>;\n}\n\nexport interface RecordSubscription<T = RecordModel> {\n    action: string; // eg. create, update, delete\n    record: T;\n}\n\nexport type OAuth2UrlCallback = (url: string) => void|Promise<void>;\n\nexport interface OAuth2AuthConfig extends SendOptions {\n    // the name of the OAuth2 provider (eg. \"google\")\n    provider: string;\n\n    // custom scopes to overwrite the default ones\n    scopes?: Array<string>;\n\n    // optional record create data\n    createData?: {[key: string]: any};\n\n    // optional callback that is triggered after the OAuth2 sign-in/sign-up url generation\n    urlCallback?: OAuth2UrlCallback;\n\n    // optional query params to send with the PocketBase auth request (eg. fields, expand, etc.)\n    query?: RecordOptions;\n}\n\nexport class RecordService<M = RecordModel> extends CrudService<M> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + '/records';\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return '/api/collections/' + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = M>(\n        topic: string,\n        callback: (data: RecordSubscription<T>) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"Missing topic.\");\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        return this.client.realtime.subscribe(this.collectionIdOrName + \"/\" + topic, callback, options);\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe from the specified topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(this.collectionIdOrName + \"/\" + topic);\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    getFullList<T = M>(options?: RecordFullListOptions): Promise<Array<T>>\n\n    /**\n     * @inheritdoc\n     */\n    getFullList<T = M>(batch?: number, options?: RecordListOptions): Promise<Array<T>>\n\n    /**\n     * @inheritdoc\n     */\n    getFullList<T = M>(batchOrOptions?: number|RecordFullListOptions, options?: RecordListOptions): Promise<Array<T>> {\n        if (typeof batchOrOptions == \"number\") {\n            return super.getFullList<T>(batchOrOptions, options);\n        }\n\n        const params = Object.assign({}, batchOrOptions, options);\n\n        return super.getFullList<T>(params);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getList<T = M>(page = 1, perPage = 30, options?: RecordListOptions): Promise<ListResult<T>> {\n        return super.getList<T>(page, perPage, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getFirstListItem<T = M>(filter: string, options?: RecordListOptions): Promise<T> {\n        return super.getFirstListItem<T>(filter, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getOne<T = M>(id: string, options?: RecordOptions): Promise<T> {\n        return super.getOne<T>(id, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    create<T = M>(bodyParams?: {[key:string]:any}|FormData, options?: RecordOptions): Promise<T> {\n        return super.create<T>(bodyParams, options);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the updated id, then\n     * on success the `client.authStore.model` will be updated with the result.\n     */\n    update<T = M>(id: string, bodyParams?: {[key:string]:any}|FormData, options?: RecordOptions): Promise<T> {\n        return super.update<RecordModel>(id, bodyParams, options).then((item) => {\n            if (\n                // is record auth\n                this.client.authStore.model?.id === item?.id &&\n                (\n                    this.client.authStore.model?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.model?.collectionName === this.collectionIdOrName\n                )\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.model` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            if (\n                success &&\n                // is record auth\n                this.client.authStore.model?.id === id &&\n                (\n                    this.client.authStore.model?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.model?.collectionName === this.collectionIdOrName\n                )\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = M>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record as any);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token':  responseData?.token || '',\n            'record': record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     */\n    listAuthMethods(options?: CommonOptions): Promise<AuthMethodsList> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send(this.baseCollectionPath + '/auth-methods', options)\n            .then((responseData: any) => {\n                return Object.assign({}, responseData, {\n                    // normalize common fields\n                    'usernamePassword': !!responseData?.usernamePassword,\n                    'emailPassword':    !!responseData?.emailPassword,\n                    'authProviders':    Array.isArray(responseData?.authProviders) ? responseData?.authProviders : [],\n                });\n            });\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     */\n    authWithPassword<T = M>(usernameOrEmail: string, password: string, options?: RecordOptions): Promise<RecordAuthResponse<T>>\n\n    /**\n     * @deprecated\n     * Consider using authWithPassword(usernameOrEmail, password, options?).\n     */\n    authWithPassword<T = M>(usernameOrEmail: string, password: string, body?: any, query?: any): Promise<RecordAuthResponse<T>>\n\n    authWithPassword<T = M>(usernameOrEmail: string, password: string, bodyOrOptions?: any, query?: any): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'identity': usernameOrEmail,\n                'password': password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authWithPassword(usernameOrEmail, pass, body?, query?) is deprecated. Consider replacing it with authWithPassword(usernameOrEmail, pass, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-password', options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2 code.\n     *\n     * If you don't have an OAuth2 code you may also want to check `authWithOAuth2` method.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     */\n    authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: {[key:string]:any},\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>\n\n    /**\n     * @deprecated\n     * Consider using authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createdData, options?).\n     */\n    authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: {[key:string]:any},\n        body?: any,\n        query?: any\n    ): Promise<RecordAuthResponse<T>>\n\n    authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: {[key:string]:any},\n        bodyOrOptions?: any,\n        query?: any\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'provider':     provider,\n                'code':         code,\n                'codeVerifier': codeVerifier,\n                'redirectUrl':  redirectUrl,\n                'createData':   createData,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/auth-with-oauth2', options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * @deprecated This form of authWithOAuth2 is deprecated.\n     *\n     * Please use `authWithOAuth2Code()` OR its simplified realtime version\n     * as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\n     */\n    async authWithOAuth2<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: {[key: string]: any},\n        bodyParams?: {[key: string]: any},\n        queryParams?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>\n\n    /**\n     * Authenticate a single auth collection record with OAuth2\n     * **without custom redirects, deeplinks or even page reload**.\n     *\n     * This method initializes a one-off realtime subscription and will\n     * open a popup window with the OAuth2 vendor page to authenticate.\n     * Once the external OAuth2 sign-in/sign-up flow is completed, the popup\n     * window will be automatically closed and the OAuth2 data sent back\n     * to the user through the previously established realtime connection.\n     *\n     * You can specify an optional `urlCallback` prop to customize\n     * the default url `window.open` behavior.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * Example:\n     *\n     * ```js\n     * const authData = await pb.collection(\"users\").authWithOAuth2({\n     *     provider: \"google\",\n     * })\n     * ```\n     *\n     * _Site-note_: when creating the OAuth2 app in the provider dashboard\n     * you have to configure `https://yourdomain.com/api/oauth2-redirect`\n     * as redirect URL.\n     */\n    async authWithOAuth2<T = M>(options: OAuth2AuthConfig): Promise<RecordAuthResponse<T>>\n\n    async authWithOAuth2<T = M>(...args: any): Promise<RecordAuthResponse<T>> {\n        // fallback to legacy format\n        if (args.length > 1 || typeof args?.[0] === 'string') {\n            console.warn(\"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\");\n            return this.authWithOAuth2Code<T>(\n                args?.[0] || '',\n                args?.[1] || '',\n                args?.[2] || '',\n                args?.[3] || '',\n                args?.[4] || {},\n                args?.[5] || {},\n                args?.[6] || {},\n            );\n        }\n\n        const config = args?.[0] || {};\n\n        const authMethods = await this.listAuthMethods();\n\n        const provider = authMethods.authProviders.find((p) => p.name === config.provider);\n        if (!provider) {\n            throw new ClientResponseError(new Error(`Missing or invalid provider \"${config.provider}\".`));\n        }\n\n        const redirectUrl = this.client.buildUrl('/api/oauth2-redirect');\n\n        // initialize a one-off realtime service\n        const realtime = new RealtimeService(this.client);\n\n        // open a new popup window in case config.urlCallback is not set\n        //\n        // note: it is opened before the async call due to Safari restrictions\n        // (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061)\n        let eagerDefaultPopup: Window|null = null;\n        if (!config.urlCallback) {\n            eagerDefaultPopup = openBrowserPopup(undefined);\n        }\n\n        function cleanup() {\n            eagerDefaultPopup?.close();\n            realtime.unsubscribe();\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                await realtime.subscribe('@oauth2', async (e) => {\n                    const oldState = realtime.clientId;\n\n                    try {\n                        if (!e.state || oldState !== e.state) {\n                            throw new Error(\"State parameters don't match.\");\n                        }\n\n                        // clear the non SendOptions props\n                        const options = Object.assign({}, config);\n                        delete options.provider;\n                        delete options.scopes;\n                        delete options.createData;\n                        delete options.urlCallback;\n\n                        const authData = await this.authWithOAuth2Code<T>(\n                            provider.name,\n                            e.code,\n                            provider.codeVerifier,\n                            redirectUrl,\n                            config.createData,\n                            options,\n                        );\n\n                        resolve(authData);\n                    } catch (err) {\n                        reject(new ClientResponseError(err));\n                    }\n\n                    cleanup();\n                });\n\n                const replacements: {[key: string]: any} = {\n                    \"state\": realtime.clientId,\n                }\n                if (config.scopes?.length) {\n                    replacements[\"scope\"] = config.scopes.join(\" \");\n                }\n\n                const url = this._replaceQueryParams(provider.authUrl + redirectUrl, replacements);\n\n                let urlCallback = config.urlCallback || function (url: string) {\n                    if (eagerDefaultPopup) {\n                       eagerDefaultPopup.location.href = url;\n                    } else {\n                        // it could have been blocked due to its empty initial url,\n                        // try again...\n                        eagerDefaultPopup = openBrowserPopup(url);\n                    }\n                }\n\n                await urlCallback(url);\n            } catch (err) {\n                cleanup();\n                reject(new ClientResponseError(err));\n            }\n        });\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     */\n    authRefresh<T = M>(options?: RecordOptions): Promise<RecordAuthResponse<T>>\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    authRefresh<T = M>(body?: any, query?: any): Promise<RecordAuthResponse<T>>\n\n    authRefresh<T = M>(bodyOrOptions?: any, query?: any): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            'method': 'POST',\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/auth-refresh', options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     */\n    requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>\n\n    requestPasswordReset(email: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'email': email,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/request-password-reset', options).then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(passwordResetToken, password, passwordConfirm, options?).\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>\n\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'token':           passwordResetToken,\n                'password':        password,\n                'passwordConfirm': passwordConfirm,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/confirm-password-reset', options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     */\n    requestVerification(email: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using requestVerification(email, options?).\n     */\n    requestVerification(email: string, body?: any, query?: any): Promise<boolean>\n\n    requestVerification(email: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'email': email,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/request-verification', options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     */\n    confirmVerification(verificationToken: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using confirmVerification(verificationToken, options?).\n     */\n    confirmVerification(verificationToken: string, body?: any, query?: any): Promise<boolean>\n\n    confirmVerification(verificationToken: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'token': verificationToken,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/confirm-verification', options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     */\n    requestEmailChange(newEmail: string, options?: CommonOptions): Promise<boolean>\n\n    /**\n     * @deprecated\n     * Consider using requestEmailChange(newEmail, options?).\n     */\n    requestEmailChange(newEmail: string, body?: any, query?: any): Promise<boolean>\n\n    requestEmailChange(newEmail: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'newEmail': newEmail,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/request-email-change', options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     */\n    confirmEmailChange(emailChangeToken: string, password: string, options?: CommonOptions): Promise<boolean>\n\n\n    /**\n     * @deprecated\n     * Consider using confirmEmailChange(emailChangeToken, password, options?).\n     */\n    confirmEmailChange(emailChangeToken: string, password: string, body?: any, query?: any): Promise<boolean>\n\n    confirmEmailChange(emailChangeToken: string, password: string, bodyOrOptions?: any, query?: any): Promise<boolean> {\n        let options: any = {\n            'method': 'POST',\n            'body': {\n                'token':    emailChangeToken,\n                'password': password,\n            }\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            'This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).',\n            options,\n            bodyOrOptions,\n            query\n        );\n\n        return this.client.send(this.baseCollectionPath + '/confirm-email-change', options)\n            .then(() => true);\n    }\n\n    /**\n     * Lists all linked external auth providers for the specified auth record.\n     */\n    listExternalAuths(recordId: string, options?: CommonOptions): Promise<Array<ExternalAuthModel>> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths', options);\n    }\n\n    /**\n     * Unlink a single external auth provider from the specified auth record.\n     */\n    unlinkExternalAuth(recordId: string, provider: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'DELETE',\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/' + encodeURIComponent(recordId) + '/external-auths/' + encodeURIComponent(provider), options)\n            .then(() => true);\n    }\n\n    // ---------------------------------------------------------------\n\n    // very rudimentary url query params replacement because at the moment\n    // URL (and URLSearchParams) doesn't seem to be fully supported in React Native\n    //\n    // note: for details behind some of the decode/encode parsing check https://unixpapa.com/js/querystring.html\n    private _replaceQueryParams(url: string, replacements: {[key: string]: any} = {}): string {\n        let urlPath = url\n        let query = \"\";\n\n        const queryIndex = url.indexOf(\"?\");\n        if (queryIndex >= 0) {\n            urlPath = url.substring(0, url.indexOf(\"?\"));\n            query = url.substring(url.indexOf(\"?\") + 1);\n        }\n\n        const parsedParams: {[key: string]: string} = {};\n\n        // parse the query parameters\n        const rawParams = query.split(\"&\");\n        for (const param of rawParams) {\n            if (param == \"\") {\n                continue\n            }\n\n            const pair = param.split(\"=\");\n            parsedParams[decodeURIComponent(pair[0].replace(/\\+/g,' '))] = decodeURIComponent((pair[1] || \"\").replace(/\\+/g,' '));\n        }\n\n        // apply the replacements\n        for (let key in replacements) {\n            if (!replacements.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (replacements[key] == null) {\n                delete parsedParams[key];\n            } else {\n                parsedParams[key] = replacements[key];\n            }\n        }\n\n        // construct back the full query string\n        query = \"\";\n        for (let key in parsedParams) {\n            if (!parsedParams.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (query != \"\") {\n                query += \"&\";\n            }\n\n            query += encodeURIComponent(key.replace(/%20/g,'+')) + \"=\" + encodeURIComponent(parsedParams[key].replace(/%20/g,'+'));\n        }\n\n        return query != \"\" ? (urlPath + \"?\" + query) : urlPath;\n    }\n}\n\nfunction openBrowserPopup(url?: string): Window|null {\n    if (typeof window === \"undefined\" || !window?.open) {\n        throw new ClientResponseError(new Error(`Not in a browser context - please pass a custom urlCallback function.`));\n    }\n\n    let width  = 1024;\n    let height = 768;\n\n    let windowWidth  = window.innerWidth;\n    let windowHeight = window.innerHeight;\n\n    // normalize window size\n    width  = width > windowWidth ? windowWidth : width;\n    height = height > windowHeight ? windowHeight : height;\n\n    let left = (windowWidth / 2) - (width / 2);\n    let top  = (windowHeight / 2) - (height / 2);\n\n    // note: we don't use the noopener and noreferrer attributes since\n    // for some reason browser blocks such windows then url is undefined/blank\n    return window.open(\n        url,\n        'popup_window',\n        'width='+width+',height='+height+',top='+top+',left='+left+',resizable,menubar=no'\n    );\n}\n", "import { CrudService }     from '@/services/utils/CrudService';\nimport { CollectionModel } from '@/services/utils/dtos';\nimport { CommonOptions }   from '@/services/utils/options';\n\nexport class CollectionService extends CrudService<CollectionModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return '/api/collections';\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     */\n    async import(\n        collections: Array<CollectionModel>,\n        deleteMissing: boolean = false,\n        options?: CommonOptions,\n    ): Promise<true> {\n        options = Object.assign({\n            'method': 'PUT',\n            'body': {\n                'collections':   collections,\n                'deleteMissing': deleteMissing,\n            }\n        }, options);\n\n        return this.client.send(this.baseCrudPath + '/import', options)\n            .then(() => true);\n    }\n}\n", "import { BaseService } from '@/services/utils/BaseService';\nimport { ListResult, LogModel }  from '@/services/utils/dtos';\nimport {\n    CommonOptions,\n    ListOptions,\n    LogStatsOptions,\n} from '@/services/utils/options';\n\nexport interface HourlyStats {\n    total: number;\n    date:  string;\n}\n\nexport class LogService extends BaseService {\n    /**\n     * Returns paginated logs list.\n     */\n    getList(page = 1, perPage = 30, options?: ListOptions): Promise<ListResult<LogModel>> {\n        options = Object.assign({'method': 'GET'}, options);\n\n        options.query = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, options.query);\n\n        return this.client.send('/api/logs', options);\n    }\n\n    /**\n     * Returns a single log by its id.\n     */\n    getOne(id: string, options?: CommonOptions): Promise<LogModel> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/logs/' + encodeURIComponent(id), options);\n    }\n\n    /**\n     * Returns logs statistics.\n     */\n    getStats(options?: LogStatsOptions): Promise<Array<HourlyStats>> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/logs/stats', options);\n    }\n}\n", "import { BaseService }   from '@/services/utils/BaseService';\nimport { CommonOptions } from '@/services/utils/options';\n\nexport interface HealthCheckResponse {\n    code:    number;\n    message: string;\n    data:    {[key: string]: any};\n}\n\nexport class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     */\n    check(options?: CommonOptions): Promise<HealthCheckResponse> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/health', options);\n    }\n}\n", "import { BaseService } from '@/services/utils/BaseService';\nimport { CommonOptions, FileOptions } from '@/services/utils/options';\n\nexport class FileService extends BaseService {\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getUrl(\n        record: {[key:string]:any},\n        filename: string,\n        queryParams: FileOptions = {}\n    ): string {\n        if (\n            !filename ||\n            !record?.id ||\n            !(record?.collectionId || record?.collectionName)\n        ) {\n            return '';\n        }\n\n        const parts = [];\n        parts.push('api')\n        parts.push('files')\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName))\n        parts.push(encodeURIComponent(record.id))\n        parts.push(encodeURIComponent(filename))\n\n        let result = this.client.buildUrl(parts.join('/'));\n\n        if (Object.keys(queryParams).length) {\n            // normalize the download query param for consistency with the Dart sdk\n            if (queryParams.download === false) {\n                delete(queryParams.download);\n            }\n\n            const params = new URLSearchParams(queryParams);\n\n            result += (result.includes('?') ? '&' : '?') + params;\n        }\n\n        return result\n    }\n\n    /**\n     * Requests a new private file access token for the current auth model (admin or record).\n     */\n    getToken(options?: CommonOptions): Promise<string> {\n        options = Object.assign({\n            'method': 'POST',\n        }, options);\n\n        return this.client.send('/api/files/token', options)\n            .then((data) => data?.token || '');\n    }\n}\n", "import { BaseService }   from '@/services/utils/BaseService';\nimport { CommonOptions } from '@/services/utils/options';\n\nexport interface BackupFileInfo {\n    key:      string;\n    size:     number;\n    modified: string;\n}\n\nexport class BackupService extends BaseService {\n    /**\n     * Returns list with all available backup files.\n     */\n    getFullList(options?: CommonOptions): Promise<Array<BackupFileInfo>> {\n        options = Object.assign({\n            'method': 'GET',\n        }, options);\n\n        return this.client.send('/api/backups', options);\n    }\n\n    /**\n     * Initializes a new backup.\n     */\n    create(basename: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n            'body':   {\n                'name': basename,\n            },\n        }, options);\n\n        return this.client.send('/api/backups', options)\n            .then(() => true);\n    }\n\n    /**\n     * Uploads an existing backup file.\n     *\n     * Example:\n     *\n     * ```js\n     * await pb.backups.upload({\n     *     file: new Blob([...]),\n     * });\n     * ```\n     */\n    upload(bodyParams: {[key:string]:any}|FormData, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n            'body':   bodyParams,\n        }, options);\n\n        return this.client.send('/api/backups/upload', options)\n            .then(() => true);\n    }\n\n    /**\n     * Deletes a single backup file.\n     */\n    delete(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'DELETE',\n        }, options);\n\n        return this.client.send(`/api/backups/${encodeURIComponent(key)}`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Initializes an app data restore from an existing backup.\n     */\n    restore(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign({\n            'method': 'POST',\n        }, options);\n\n        return this.client.send(`/api/backups/${encodeURIComponent(key)}/restore`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Builds a download url for a single existing backup using an\n     * admin file token and the backup file key.\n     *\n     * The file token can be generated via `pb.files.getToken()`.\n     */\n    getDownloadUrl(token: string, key: string): string {\n        return this.client.buildUrl(`/api/backups/${encodeURIComponent(key)}?token=${encodeURIComponent(token)}`);\n    }\n}\n", "import { ClientResponseError } from '@/ClientResponseError';\nimport { BaseAuthStore }       from '@/stores/BaseAuthStore';\nimport { LocalAuthStore }      from '@/stores/LocalAuthStore';\nimport { SettingsService }     from '@/services/SettingsService';\nimport { AdminService }        from '@/services/AdminService';\nimport { RecordService }       from '@/services/RecordService';\nimport { CollectionService }   from '@/services/CollectionService';\nimport { LogService }          from '@/services/LogService';\nimport { RealtimeService }     from '@/services/RealtimeService';\nimport { HealthService }       from '@/services/HealthService';\nimport { FileService }         from '@/services/FileService';\nimport { BackupService }       from '@/services/BackupService';\nimport { RecordModel }         from '@/services/utils/dtos';\nimport { SendOptions, FileOptions, normalizeUnknownQueryParams } from '@/services/utils/options';\n\nexport interface BeforeSendResult {\n    [key:     string]: any, // for backward compatibility\n    url?:     string,\n    options?: {[key: string]: any}\n}\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect and modify the url and request options.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * You can return a non-empty result object `{ url, options }` to replace the url and request options entirely.\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, options) {\n     *     options.headers = Object.assign({}, options.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return { url, options }\n     * };\n     * ```\n     */\n    beforeSend?: (url: string, options: SendOptions) => BeforeSendResult|Promise<BeforeSendResult>;\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             data:     data,\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: (response: Response, data: any) => any;\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Admin APIs**.\n     */\n    readonly admins: AdminService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    /**\n     * An instance of the service that handles the **File APIs**.\n     */\n    readonly files: FileService;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    /**\n     * An instance of the service that handles the **Backup APIs**.\n     */\n    readonly backups: BackupService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(\n        baseUrl = '/',\n        authStore?: BaseAuthStore | null,\n        lang = 'en-US',\n    ) {\n        this.baseUrl   = baseUrl;\n        this.lang      = lang;\n        this.authStore = authStore || new LocalAuthStore();\n\n        // services\n        this.admins      = new AdminService(this);\n        this.collections = new CollectionService(this);\n        this.files       = new FileService(this);\n        this.logs        = new LogService(this);\n        this.settings    = new SettingsService(this);\n        this.realtime    = new RealtimeService(this);\n        this.health      = new HealthService(this);\n        this.backups     = new BackupService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     *\n     * @param  {string} idOrName\n     * @return {RecordService}\n     */\n    collection<M = RecordModel>(idOrName: string): RecordService<M> {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(requestKey: string): Client {\n        if (this.cancelControllers[requestKey]) {\n            this.cancelControllers[requestKey].abort();\n            delete this.cancelControllers[requestKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Constructs a filter expression with placeholders populated from a parameters object.\n     *\n     * Placeholder parameters are defined with the `{:paramName}` notation.\n     *\n     * The following parameter values are supported:\n     *\n     * - `string` (_single quotes are autoescaped_)\n     * - `number`\n     * - `boolean`\n     * - `Date` object (_stringified into the PocketBase datetime format_)\n     * - `null`\n     * - everything else is converted to a string using `JSON.stringify()`\n     *\n     * Example:\n     *\n     * ```js\n     * pb.collection(\"example\").getFirstListItem(pb.filter(\n     *    'title ~ {:title} && created >= {:created}',\n     *    { title: \"example\", created: new Date()}\n     * ))\n     * ```\n     */\n    filter(raw: string, params?: {[key:string]:any}): string {\n        if (!params) {\n            return raw;\n        }\n\n        for (let key in params) {\n            let val = params[key];\n            switch (typeof val) {\n                case 'boolean':\n                case 'number':\n                    val = '' + val;\n                    break;\n                case 'string':\n                    val = \"'\" + val.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    if (val === null) {\n                        val = \"null\";\n                    } else if (val instanceof Date) {\n                        val = \"'\" + val.toISOString().replace('T', ' ') + \"'\";\n                    } else {\n                        val = \"'\" + JSON.stringify(val).replace(/'/g, \"\\\\'\") + \"'\";\n                    }\n            }\n            raw = raw.replaceAll(\"{:\" + key + \"}\", val)\n        }\n\n        return raw;\n    }\n\n    /**\n     * Legacy alias of `pb.files.getUrl()`.\n     */\n    getFileUrl(\n        record: {[key:string]:any},\n        filename: string,\n        queryParams: FileOptions = {}\n    ): string {\n        return this.files.getUrl(record, filename, queryParams);\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl;\n\n        // construct an absolute base url if in a browser environment\n        if (\n            typeof window !== 'undefined' &&\n            !!window.location &&\n            !url.startsWith('https://') &&\n            !url.startsWith('http://')\n        ) {\n            url = window.location.origin?.endsWith('/') ?\n                window.location.origin.substring(0, window.location.origin.length - 1) :\n                (window.location.origin || '');\n\n            if (!this.baseUrl.startsWith('/')) {\n                url += window.location.pathname || '/';\n                url += url.endsWith('/') ? '' : '/';\n            }\n\n            url += this.baseUrl;\n        }\n\n        // concatenate the path\n        if (path) {\n            url += url.endsWith('/') ? '' : '/'; // append trailing slash if missing\n            url += path.startsWith('/') ? path.substring(1) : path;\n        }\n\n        return url;\n    }\n\n    /**\n     * Sends an api http request.\n     */\n    async send<T = any>(path: string, options: SendOptions): Promise<T> {\n        options = this.initSendOptions(path, options);\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        if (this.beforeSend) {\n            const result = Object.assign({}, await this.beforeSend(url, options));\n            if (typeof result.url !== 'undefined' || typeof result.options !== 'undefined') {\n                url = result.url || url;\n                options = result.options || options;\n            } else if (Object.keys(result).length) {\n                // legacy behavior\n                options = result as SendOptions;\n                console?.warn && console.warn('Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.');\n            }\n        }\n\n        // serialize the query parameters\n        if (typeof options.query !== 'undefined') {\n            const query = this.serializeQueryParams(options.query)\n            if (query) {\n                url += (url.includes('?') ? '&' : '?') + query;\n            }\n            delete options.query;\n        }\n\n        // ensures that the json body is serialized\n        if (\n            this.getHeader(options.headers, 'Content-Type') == 'application/json' &&\n            options.body && typeof options.body !== 'string'\n        ) {\n            options.body = JSON.stringify(options.body);\n        }\n\n        const fetchFunc = options.fetch || fetch;\n\n        // send the request\n        return fetchFunc(url, options)\n            .then(async (response) => {\n                let data : any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = await this.afterSend(response, data);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url:      response.url,\n                        status:   response.status,\n                        data:     data,\n                    });\n                }\n\n                return data as T;\n            }).catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Shallow copy the provided object and takes care to initialize\n     * any options required to preserve the backward compatability.\n     *\n     * @param  {SendOptions} options\n     * @return {SendOptions}\n     */\n    private initSendOptions(path: string, options: SendOptions): SendOptions {\n        options = Object.assign({ method: 'GET' } as SendOptions, options)\n\n        // auto convert the body to FormData, if needed\n        options.body = this.convertToFormDataIfNeeded(options.body);\n\n        // move unknown send options as query parameters\n        normalizeUnknownQueryParams(options);\n\n        // requestKey normalizations for backward-compatibility\n        // ---\n        options.query = Object.assign({}, options.params, options.query);\n        if (typeof options.requestKey === 'undefined') {\n            if (options.$autoCancel === false || options.query.$autoCancel === false) {\n                options.requestKey = null;\n            } else if (options.$cancelKey || options.query.$cancelKey) {\n                options.requestKey = options.$cancelKey || options.query.$cancelKey;\n            }\n        }\n        // remove the deprecated special cancellation params from the other query params\n        delete options.$autoCancel;\n        delete options.query.$autoCancel;\n        delete options.$cancelKey;\n        delete options.query.$cancelKey;\n        // ---\n\n        // add the json header, if not explicitly set\n        // (for FormData body the Content-Type header should be skipped since the boundary is autogenerated)\n        if (\n            this.getHeader(options.headers, 'Content-Type') === null &&\n            !this.isFormData(options.body)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                'Content-Type': 'application/json',\n            });\n        }\n\n        // add Accept-Language header, if not explicitly set\n        if (this.getHeader(options.headers, 'Accept-Language') === null) {\n            options.headers = Object.assign({}, options.headers, {\n                'Accept-Language': this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has valid token\n            this.authStore.token &&\n            // auth header is not explicitly set\n            (this.getHeader(options.headers, 'Authorization') === null)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                'Authorization': this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && options.requestKey !== null) {\n            const requestKey = options.requestKey || ((options.method || 'GET') + path);\n\n            delete options.requestKey;\n\n            // cancel previous pending requests\n            this.cancelRequest(requestKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[requestKey] = controller;\n            options.signal = controller.signal;\n        }\n\n        return options\n    }\n\n    /**\n     * Converts analyzes the provided body and converts it to FormData\n     * in case a plain object with File/Blob values is used.\n     */\n    private convertToFormDataIfNeeded(body: any): any {\n        if (\n            typeof FormData === 'undefined' ||\n            typeof body === \"undefined\" ||\n            typeof body !== \"object\" ||\n            body === null ||\n            this.isFormData(body) ||\n            !this.hasBlobField(body)\n        ) {\n            return body;\n        }\n\n        const form = new FormData();\n\n        for (let key in body) {\n            // @todo consider adding a note that `json` array values should be serialized!\n            const values = Array.isArray(body[key]) ? body[key] : [body[key]];\n            for (let val of values) {\n                form.append(key, val);\n            }\n        }\n\n        return form;\n    }\n\n    /**\n     * Checks if the submitted body object has at least one Blob/File field.\n     */\n    private hasBlobField(body: {[key:string]: any}): boolean {\n        for (let key in body) {\n            const values = Array.isArray(body[key]) ? body[key] : [body[key]];\n            for (let v of values) {\n                if (\n                    (typeof Blob !== 'undefined' && v instanceof Blob) ||\n                    (typeof File !== 'undefined' && v instanceof File)\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Extracts the header with the provided name in case-insensitive manner.\n     * Returns `null` if no header matching the name is found.\n     */\n    private getHeader(headers: {[key:string]:string}|undefined, name: string): string|null {\n        headers = headers || {};\n        name = name.toLowerCase();\n\n        for (let key in headers) {\n            if (key.toLowerCase() == name) {\n                return headers[key];\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Loosely checks if the specified body is a FormData instance.\n     */\n    private isFormData(body: any): boolean {\n        return body && (\n            // we are checking the constructor name because FormData\n            // is not available natively in some environments and the\n            // polyfill(s) may not be globally accessible\n            body.constructor.name === 'FormData' ||\n            // fallback to global FormData instance check\n            // note: this is needed because the constructor.name could be different in case of\n            //       custom global FormData implementation, eg. React Native on Android/iOS\n            (typeof FormData !== 'undefined' && body instanceof FormData)\n        )\n    }\n\n    /**\n     * Serializes the provided query parameters into a query string.\n     */\n    private serializeQueryParams(params: {[key: string]: any}): string {\n        const result: Array<string> = [];\n        for (const key in params) {\n            if (params[key] === null) {\n                // skip null query params\n                continue;\n            }\n\n            const value = params[key];\n            const encodedKey = encodeURIComponent(key);\n\n            if (Array.isArray(value)) {\n                // repeat array params\n                for (const v of value) {\n                    result.push(encodedKey + '=' + encodeURIComponent(v));\n                }\n            } else if (value instanceof Date) {\n                result.push(encodedKey + '=' + encodeURIComponent(value.toISOString()));\n            } else if (typeof value !== null && typeof value === 'object') {\n                result.push(encodedKey + '=' + encodeURIComponent(JSON.stringify(value)));\n            } else {\n                result.push(encodedKey + '=' + encodeURIComponent(value));\n            }\n        }\n\n        return result.join('&');\n    }\n}\n", "import { BaseAuthStore, AuthModel } from '@/stores/BaseAuthStore';\n\nexport type AsyncSaveFunc = (serializedPayload: string) => Promise<void>;\n\nexport type AsyncClearFunc = () => Promise<void>;\n\ntype queueFunc = () => Promise<void>;\n\n/**\n * AsyncAuthStore is a helper auth store implementation\n * that could be used with any external async persistent layer\n * (key-value db, local file, etc.).\n *\n * Here is an example with the React Native AsyncStorage package:\n *\n * ```\n * import AsyncStorage from \"@react-native-async-storage/async-storage\";\n * import PocketBase, { AsyncAuthStore } from \"pocketbase\";\n *\n * const store = new AsyncAuthStore({\n *     save:    async (serialized) => AsyncStorage.setItem(\"pb_auth\", serialized),\n *     initial: AsyncStorage.getItem(\"pb_auth\"),\n * });\n *\n * const pb = new PocketBase(\"https://example.com\", store)\n * ```\n */\nexport class AsyncAuthStore extends BaseAuthStore {\n    private saveFunc: AsyncSaveFunc;\n    private clearFunc?: AsyncClearFunc;\n    private queue: Array<queueFunc> = [];\n\n    constructor(config: {\n        // The async function that is called every time\n        // when the auth store state needs to be persisted.\n        save: AsyncSaveFunc,\n\n        /// An *optional* async function that is called every time\n        /// when the auth store needs to be cleared.\n        ///\n        /// If not explicitly set, `saveFunc` with empty data will be used.\n        clear?: AsyncClearFunc,\n\n        // An *optional* initial data to load into the store.\n        initial?: string|Promise<any>,\n    }) {\n        super();\n\n        this.saveFunc = config.save;\n        this.clearFunc = config.clear;\n\n        this._enqueue(() => this._loadInitial(config.initial));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model?: AuthModel): void {\n        super.save(token, model);\n\n        let value = '';\n        try {\n            value = JSON.stringify({token, model})\n        } catch (err) {\n            console.warn('AsyncAuthStore: failed to stringify the new state');\n        }\n\n        this._enqueue(() => this.saveFunc(value));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear(): void {\n        super.clear();\n\n        if (this.clearFunc) {\n            this._enqueue(() => this.clearFunc!());\n        } else {\n            this._enqueue(() => this.saveFunc(\"\"));\n        }\n    }\n\n    /**\n     * Initializes the auth store state.\n     */\n    private async _loadInitial(payload?: string|Promise<any>) {\n        try {\n            payload = await payload;\n\n            if (payload) {\n                let parsed;\n                if (typeof payload === 'string') {\n                    parsed = JSON.parse(payload) || {};\n                } else if (typeof payload === 'object') {\n                    parsed = payload;\n                }\n\n                this.save(parsed.token || \"\", parsed.model || null);\n            }\n        } catch (_) {}\n    }\n\n    /**\n     * Appends an async function to the queue.\n     */\n    private _enqueue(asyncCallback: () => Promise<void>) {\n        this.queue.push(asyncCallback);\n\n        if (this.queue.length == 1) {\n            this._dequeue();\n        }\n    }\n\n    /**\n     * Starts the queue processing.\n     */\n    private _dequeue() {\n        if (!this.queue.length) {\n            return;\n        }\n\n        this.queue[0]().finally(() => {\n            this.queue.shift();\n\n            if (!this.queue.length) {\n                return;\n            }\n\n            this._dequeue();\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": ["ClientResponseError", "Error", "errData", "super", "this", "url", "status", "response", "isAbort", "originalError", "Object", "setPrototypeOf", "prototype", "data", "DOMException", "name", "message", "cause", "includes", "toJSON", "fieldContentRegExp", "cookieParse", "str", "options", "result", "decode", "assign", "defaultDecode", "index", "length", "eqIdx", "indexOf", "endIdx", "lastIndexOf", "key", "slice", "trim", "val", "charCodeAt", "_", "cookieSerialize", "opt", "encode", "defaultEncode", "test", "TypeError", "value", "maxAge", "isNaN", "isFinite", "Math", "floor", "domain", "path", "expires", "isDate", "toString", "call", "Date", "valueOf", "toUTCString", "httpOnly", "secure", "priority", "toLowerCase", "sameSite", "decodeURIComponent", "encodeURIComponent", "atobPolyfill", "getTokenPayload", "token", "encodedPayload", "split", "map", "c", "join", "JSON", "parse", "e", "isTokenExpired", "expirationThreshold", "payload", "keys", "exp", "now", "atob", "input", "String", "replace", "bs", "buffer", "bc", "idx", "output", "charAt", "fromCharCode", "defaultCookieKey", "BaseAuthStore", "constructor", "baseToken", "baseModel", "_onChangeCallbacks", "model", "isValid", "isAdmin", "type", "isAuthRecord", "triggerChange", "clear", "cookie", "rawData", "Array", "isArray", "save", "defaultOptions", "stringify", "resultLength", "Blob", "size", "id", "email", "extraProps", "prop", "callback", "fireImmediately", "push", "i", "splice", "LocalAuthStore", "storageKey", "storageFallback", "_bindStorageEvent", "_storageGet", "_storageSet", "_storageRemove", "window", "localStorage", "rawValue", "getItem", "normalizedVal", "setItem", "removeItem", "addEventListener", "BaseService", "client", "SettingsService", "method", "send", "bodyParams", "body", "filesystem", "then", "toEmail", "emailTemplate", "template", "clientId", "teamId", "keyId", "privateKey", "duration", "CrudService", "batchOrqueryParams", "_getFullList", "batch", "page", "perPage", "query", "baseCrudPath", "responseData", "items", "item", "filter", "requestKey", "skipTotal", "getList", "code", "batchSize", "request", "async", "list", "concat", "normalizeLegacyOptionsArgs", "legacyWarn", "baseOptions", "bodyOrOptions", "hasQuery", "console", "warn", "resetAutoRefresh", "_resetAutoRefresh", "AdminService", "update", "authStore", "collectionId", "delete", "success", "admin", "password", "identity", "autoRefreshThreshold", "autoRefresh", "authData", "authResponse", "registerAutoRefresh", "threshold", "refreshFunc", "reauthenticateFunc", "oldBeforeSend", "beforeSend", "oldModel", "unsubStoreChange", "onChange", "newToken", "sendOptions", "oldToken", "headers", "authRefresh", "authWithPassword", "bind", "resetToken", "passwordConfirm", "knownSendOptionsKeys", "normalizeUnknownQueryParams", "RealtimeService", "eventSource", "subscriptions", "lastSentSubscriptions", "maxConnectTimeout", "reconnectAttempts", "maxReconnectAttempts", "Infinity", "predefinedReconnectIntervals", "pendingConnects", "isConnected", "topic", "serialized", "listener", "msgEvent", "submitSubscriptions", "connect", "unsubscribeByTopicAndListener", "needToSubmit", "subs", "getSubscriptionsByTopic", "hasSubscriptionListeners", "removeEventListener", "disconnect", "keyPrefix", "hasAtleastOneTopic", "startsWith", "exist", "keyToCheck", "addAllSubscriptionListeners", "getNonEmptySubscriptionKeys", "getSubscriptionsCancelKey", "catch", "err", "removeAllSubscriptionListeners", "Promise", "resolve", "reject", "initConnect", "clearTimeout", "connectTimeoutId", "setTimeout", "connectErrorHandler", "EventSource", "buildUrl", "onerror", "lastEventId", "retries", "hasUnsentSubscriptions", "p", "reconnectTimeoutId", "connectSubs", "latestTopics", "t", "timeout", "fromReconnect", "cancelRequest", "close", "RecordService", "collectionIdOrName", "baseCollectionPath", "realtime", "subscribe", "unsubscribe", "unsubscribeByPrefix", "batchOrOptions", "getFullList", "params", "getFirstListItem", "getOne", "create", "collectionName", "record", "usernamePassword", "emailPassword", "authProviders", "usernameOrEmail", "provider", "codeVerifier", "redirectUrl", "createData", "args", "authWithOAuth2Code", "config", "listAuthMethods", "find", "eagerDefaultPopup", "cleanup", "urlCallback", "openBrowserPopup", "undefined", "oldState", "state", "scopes", "replacements", "_replaceQueryParams", "authUrl", "location", "href", "passwordResetToken", "verificationToken", "newEmail", "emailChangeToken", "recordId", "urlPath", "substring", "parsedParams", "rawParams", "param", "pair", "hasOwnProperty", "open", "width", "height", "windowWidth", "innerWidth", "windowHeight", "innerHeight", "left", "top", "CollectionService", "collections", "deleteMissing", "LogService", "HealthService", "FileService", "filename", "queryParams", "parts", "download", "URLSearchParams", "BackupService", "basename", "Client", "baseUrl", "lang", "cancelControllers", "recordServices", "enableAutoCancellation", "admins", "files", "logs", "settings", "health", "backups", "idOrName", "enable", "abort", "cancelAllRequests", "k", "raw", "toISOString", "replaceAll", "getUrl", "origin", "endsWith", "pathname", "initSendOptions", "serializeQueryParams", "getHeader", "fetch", "json", "afterSend", "convertToFormDataIfNeeded", "$autoCancel", "$cancelKey", "isFormData", "Authorization", "controller", "AbortController", "signal", "FormData", "hasBlobField", "form", "values", "append", "v", "File", "encodedKey", "AsyncAuthStore", "queue", "saveFunc", "clearFunc", "_enqueue", "_loadInitial", "initial", "parsed", "asyncCallback", "_dequeue", "finally", "shift"]
}
